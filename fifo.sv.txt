module syn_boun(
 // parameter  width =5;
  //parameter depth = 28;
  input clk,
  input rst,
  input [15:0]data_in,
  input w_en,
  input r_en,
  output reg full,
  output reg empty,
  output reg [15:0] data_out
);
  reg [15:0] mem[15:0];
  reg [12:0] w_ptr,r_ptr;
  reg [3:0] count;
  
  always @(posedge clk or negedge rst) begin
    if (!rst) begin
      w_ptr <= 0;
      r_ptr <= 0;
      count <= 0;
      data_out <= 0;
    end
      else begin
        if (w_en && !full) begin 
      mem[w_ptr] <= data_in;
          w_ptr <= (w_ptr == 12)? 0: w_ptr + 1;
      count <= count + 1;
        end
        if (r_en && !empty)begin
          data_out <= mem[r_ptr];
          r_ptr <= (r_ptr == 12)? 0: r_ptr + 1;
          count <= count - 1;
        end
      end
    end
  always @(*) begin
    full = (count == 16);
    empty = (count == 0);
  end
  //assign data_out = (empty) ? '0:mem[r_ptr];
endmodule
module tb();
  reg  clk,rst,w_en,r_en;
  reg [15:0] data_in;
  wire [15:0] data_out;
  wire [12:0] w_ptr,r_ptr;
  syn_boun DUT(
    .clk(clk),
    .rst(rst),
    .data_in(data_in),
    .w_en(w_en),
    .r_en(r_en),
    .full(full),
    .empty(empty),
    .data_out(data_out)
  );
  always #5 clk =~ clk;
  initial begin
    clk =0;
    rst =0;
    data_in=0;
    w_en =0;
    r_en =0;
  #10 rst = 1;
    #10 w_en =1;
    #10 r_en =0;
    /*repeat(10) begin
       #10 data_in = data_in+1;
    end
    #10 w_en =0;
    #10 r_en =1;*/
      
  #10  data_in = 4'd1; //w_en =1; r_en =1;
  #10  data_in = 4'd2; 
  #10  data_in = 4'd4; 
  #10  data_in = 4'd5;  
  #10  data_in = 4'd7; 
  #10  data_in = 4'd9;  
  #10  data_in = 4'd10; 
  #10  data_in = 4'd13; 
  #10  data_in = 4'd15; 
    #10 w_en =0;
    #10 r_en =1;
  end
  initial begin
    $monitor("full=%b,empty=%b,data_in=%d,data_out=%d",full,empty,data_in,data_out); 
    #260 $finish();
  end
  initial begin
    $dumpfile("$dumpfile.vcd");
    $dumpvars();
  end
endmodule